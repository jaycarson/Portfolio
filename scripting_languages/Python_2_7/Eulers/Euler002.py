#!/usr/bin/python

import argparse


class Euler002(object):
    """
    Euler002 - This script is to solve the following Euler Problem:

    Each new term in the Fibonacci sequence is generated by adding the
    previous two terms. By starting with 1 and 2, the first 10 terms
    will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values
    do not exceed four million, find the sum of the even-valued terms.
    """
    def __init__(self):
        """
        Initialize the object. No parameter for initialization
        """

    def __call__(self, input_restriction):
        """
        Implement the call operator.

        Parameters:
            Restrict: an integer parameter used to restrict the
                calculation of the Euler problem.
        """
        self.restrict = input_restriction
        return self.calculate()

    def calculate(self):
        x = 0
        answer = 0
        value_this = 1
        value_next = 2
        value_last = 0
        answer = 0

        while value_this < self.restrict:
            if value_this % 2 == 0:
                answer += value_this
            value_next = self.next_fib_number(value_this, value_last)
            value_last = value_this
            value_this = value_next

        return answer

    def next_fib_number(self, value_this, value_last):
        return (value_this + value_last)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "restrict",
        type=int,
        help="an integer parameter used to restrict the Euler calculation"
    )
    args = parser.parse_args()
    parser.parse_args()

    python_app = Euler002()
    print str(python_app(args.restrict))
